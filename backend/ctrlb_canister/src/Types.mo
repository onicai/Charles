import Nat64 "mo:base/Nat64";

module Types {
    public type StoryID = Text; // Must be unique for each story to be created

    public type Prompt = {
        prompt : Text;
        //  Max number of steps to run for
        steps : Nat64;
        //  Temperature [0:1] (0.0 = stories are deterministic)
        temperature : Float; // Candid float64
        //  p value in top-p (nucleus) sampling. [0:1] (1.0=off)
        topp : Float; // Candid float64
        //  Seed  (0=use random seed based on time)
        rng_seed : Nat64;
    };

    public type CanisterIDRecordResult = Result<CanisterIDRecord, ApiError>;
    public type CanisterIDRecord = {
        canister_id : Text;
    };

    public type LLMCanister = actor {
        health : () -> async StatusCodeRecordResult;
        ready : () -> async StatusCodeRecordResult;
        nft_ami_whitelisted : () -> async StatusCodeRecordResult;
        nft_story_start_mo : (NFT_llama2_c, Prompt) -> async InferenceRecordResult;
        nft_story_continue_mo : (NFT_llama2_c, Prompt) -> async InferenceRecordResult;
        nft_story_delete : (NFT_llama2_c) -> async StatusCodeRecordResult;
    };

    // --
    // Input to StoryUpdate endpoint called by bioniq's NFT collection canister
    public type StoryInputRecord = {
        storyID : Text;
        storyPrompt : Text;
    };

    // --
    // Output from StoryUpdate endpoint called by bioniq's NFT collection canister
    public type StoryOutputRecordResult = Result<StoryOutputRecord, ApiError>;
    public type StoryOutputRecord = {
        storyID : Text;
        storyPrompt : Text;
        story : Text;
        status : Text;
        llmCanisterID : Text;
    };

    //--
    public type ApiError = {
        #InvalidId;
        #StatusCode : Nat16;
        #Other : Text;
        #ZeroAddress;
    };

    //--
    public type Result<S, E> = {
        #Ok : S;
        #Err : E;
    };

    // --
    public type StatusCodeRecordResult = Result<StatusCodeRecord, ApiError>;
    public type StatusCodeRecord = { status_code : Nat16 };

    // --
    // This is what the llama2_c canister uses
    // We set the token_id equal to the storyID
    public type NFT_llama2_c = {
        token_id : Text;
    };

    // --
    // Returned by 'nft_story_start', 'nft_story_continue'
    // Section of a story, generated by a single inference call
    public type InferenceRecordResult = Result<InferenceRecord, ApiError>;
    public type InferenceRecord = {
        inference : Text;
        num_tokens : Nat64;
    };
};
