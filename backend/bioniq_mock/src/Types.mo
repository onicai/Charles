import Nat64 "mo:base/Nat64";

module Types {
    public type CharlesCtrlbCanister = actor {
        health : () -> async StatusCodeRecordResult;
        ready : () -> async StatusCodeRecordResult;
        whoami: () -> async Principal;
        amiWhitelisted : () -> async StatusCodeRecordResult;
        StoryUpdate : (storyInputRecord: StoryInputRecord) -> async StoryOutputRecordResult;
    };

    // --
    // Input to StoryUpdate endpoint called by bioniq's NFT collection canister
    public type StoryInputRecord = {
        storyID : Text;
        storyPrompt : Text;
    };

    // --
    // Output from StoryUpdate & StoryGet endpoints called by bioniq's NFT collection canister
    public type StoryOutputRecordResult = Result<StoryOutputRecord, ApiError>;
    public type StoryOutputRecord = {
        storyID : Text;
        storyPrompt : Text;
        story : Text;
        status : Text;
        llmCanisterID : Text;
    };

    //--
    public type ApiError = {
        #InvalidId;
        #StatusCode : Nat16;
        #Other : Text;
        #ZeroAddress;
    };

    //--
    public type Result<S, E> = {
        #Ok : S;
        #Err : E;
    };

    // --
    public type StatusCodeRecordResult = Result<StatusCodeRecord, ApiError>;
    public type StatusCodeRecord = { status_code : Nat16 };

    // --
    // This is what the llama2_c canister uses
    // We set the token_id equal to the storyID
    public type NFT_llama2_c = {
        token_id : Text;
    };

    // --
    // Returned by 'nft_story_start', 'nft_story_continue'
    // Section of a story, generated by a single inference call
    public type InferenceRecordResult = Result<InferenceRecord, ApiError>;
    public type InferenceRecord = {
        inference : Text;
        num_tokens : Nat64;
    };
};
